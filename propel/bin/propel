#!/usr/bin/env python


def cli_factory(args):
    """
    Process CLI arguments and call required propel functions

    :param args: Parsed arguments by argparse
    :type args: argparse.Namespace
    """
    if args.subparser_name == 'webserver':
        print "Starting Webserver"
    elif args.subparser_name == 'celery':
        print "Starting Celery"
    elif args.subparser_name == 'queue':
        print "Starting Queue"
    else:
        raise NotImplementedError()


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    subparser = parser.add_subparsers(dest='subparser_name')

    # Options to manage Webserver
    webserver_parser = subparser.add_parser('webserver', help='Manage Webserver')
    webserver_parser.add_argument(
        '-p',
        '--port',
        default=8080,
        type=int,
        help="Webserver Port"
    )
    webserver_parser.add_argument(
        '-x',
        '--stop',
        action="store_true",
        help="Stop Webserver"
    )

    # Options to manage Celery
    celery_parser = subparser.add_parser('celery', help='Manage Celery Workers')
    celery_parser.add_argument(
        '-s',
        '--start',
        metavar=("num_workers"),
        type=int,
        action="store",
        help="Start Celery Workers"
    )
    celery_parser.add_argument(
        '-q',
        '--stop',
        action="store_true",
        help="Stop Celery Worker"
    )
    celery_parser.add_argument(
        '-x',
        '--stop_all',
        action="store_true",
        help="Stop All Celery Workers"
    )

    # Options to manage Queue
    queue_parser = subparser.add_parser('queue', help='Manage Queue')
    queue_parser.add_argument(
        '-s',
        '--start',
        action="store_true",
        help="Start RabbitMQ"
    )
    queue_parser.add_argument(
        '-x',
        '--stop',
        action="store_true",
        help="Stop RabbitMQ"
    )

    cli_args = parser.parse_args()
    cli_factory(cli_args)
